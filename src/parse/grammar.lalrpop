use codespan::ByteIndex;
use sym::Symbol;

use ast;
use error::Error;
use token::Token;
use span::IntoSpan;

grammar;

// Lexer integration
extern {
    type Location = ByteIndex;
    type Error = Error;

    enum Token {
        TYPE      => Token::Type,
        VAR       => Token::Var,
        FUNCTION  => Token::Function,
        BREAK     => Token::Break,
        OF        => Token::Of,
        END       => Token::End,
        IN        => Token::In,
        NIL       => Token::Nil,
        LET       => Token::Let,
        DO        => Token::Do,
        TO        => Token::To,
        FOR       => Token::For,
        WHILE     => Token::While,
        ELSE      => Token::Else,
        THEN      => Token::Then,
        IF        => Token::If,
        ARRAY     => Token::Array,
        ASSIGN    => Token::Assign,
        LOR       => Token::LOr,
        LAND      => Token::LAnd,
        GE        => Token::Ge,
        GT        => Token::Gt,
        LE        => Token::Le,
        LT        => Token::Lt,
        NEQ       => Token::Neq,
        EQ         => Token::Eq,
        DIV       => Token::Div,
        MUL       => Token::Mul,
        SUB       => Token::Sub,
        ADD       => Token::Add,
        DOT       => Token::Dot,
        LBRACE    => Token::LBrace,
        RBRACE    => Token::RBrace,
        LBRACK    => Token::LBrack,
        RBRACK    => Token::RBrack,
        LPAREN    => Token::LParen,
        RPAREN    => Token::RParen,
        SEMICOLON => Token::Semicolon,
        COLON     => Token::Colon,
        COMMA     => Token::Comma,
        INT       => Token::Int(<i32>),
        STR       => Token::Str(<String>),
        ID        => Token::Ident(<Symbol>),
    }
}

// Comma-separated list of T
Comma<T>: Vec<T> = {
    <h: T?> <t: (COMMA <T>)*> => {
        match h {
        | None        => t,
        | Some(e) => {
            let mut v = vec![e];
            v.extend(t);
            v
        }}
    }
}

// Semicolon-separated list of T
Semicolon<T> : Vec<T> = {
    <h: T?> <t: (SEMICOLON <T>)*> => {
        match h {
        | None        => t,
        | Some(e) => {
            let mut v = vec![e];
            v.extend(t);
            v
        }}
    }
}

pub Program: ast::Exp = Stm;

Decs: Vec<ast::Dec> = {
    TypeDecRec,
    VarDecRec,
    FunDecRec,
}

// Mutually recursive type declaration
TypeDecRec: Vec<ast::Dec> = {

    // Recursive type declarations followed by var declarations
    <l: @L> <decs: TypeDec+> <r: @R> <rest: VarDecRec> => {
        let mut rest = rest;
        rest.insert(0, ast::Dec::Type(decs, (l, r).into_span()));
        rest
    },

    // Recursive type declarations followed by recursive function declarations
    <l: @L> <decs: TypeDec+> <r: @R> <rest: FunDecRec> => {
        let mut rest = rest;
        rest.insert(0, ast::Dec::Type(decs, (l, r).into_span()));
        rest
    },

    // Just recursive type declarations
    <l: @L> <decs: TypeDec+> <r: @R> => {
        vec![ast::Dec::Type(decs, (l, r).into_span())]
    },

}

TypeDec: ast::TypeDec = {

    // type type-id = ty
    <l: @L> TYPE <ln: @L> <name: ID> <rn: @R> EQ <ty: Type> <r: @R> => {
        ast::TypeDec { name, name_span: (ln, rn).into_span(), ty, span: (l, r).into_span() }
    },

}

Type: ast::Type = {

    // ty -> type-id
    <l: @L> <name: ID> <r: @R> => {
        ast::Type::Name(name, (l, r).into_span())
    },

    // ty -> { tyfields }
    <l: @L> LBRACK <fields: Comma<FieldDec>> RBRACK <r: @R> => {
        ast::Type::Rec(fields, (l, r).into_span())
    },

    // ty -> array of type-id
    <l: @L> ARRAY OF <ln: @L> <name: ID> <r: @R> => {
        ast::Type::Arr(name, (ln, r).into_span(), (l, r).into_span())
    },

}

FieldDec: ast::FieldDec = {

    // tyfields -> id : type-id
    <l: @L> <name: ID> <rn: @R> COLON <lt: @L> <ty: ID> <r: @R> => {
        ast::FieldDec {
          name,
          name_span: (l, rn).into_span(),
          escape: false,
          ty,
          ty_span: (lt, r).into_span(),
          span: (l, r).into_span()
        }
    },

}

VarDecRec: Vec<ast::Dec> = {

    <dec: VarDec> <rest: Decs> => {
        let mut rest = rest;
        rest.insert(0, dec);
        rest
    },

    <dec: VarDec> => {
        vec![dec]
    },

}

VarDec: ast::Dec = {

    // var id := exp
    <l: @L> VAR <ln: @L> <name: ID> <rn: @R> ASSIGN <init: Exp> <r: @R> => {
        ast::Dec::Var {
            name,
            name_span: (ln, rn).into_span(),
            escape: false,
            ty: None,
            ty_span: None,
            init,
            span: (l, r).into_span()
        }
    },

    // var id: type-id := exp
    <l: @L> VAR <ln: @L> <name: ID> <rn: @R> COLON <lt: @L> <ty: ID> <rt: @R> ASSIGN <init: Exp> <r: @R> => {
        ast::Dec::Var {
            name,
            name_span: (ln, rn).into_span(),
            escape: false,
            ty: Some(ty),
            ty_span: Some((lt, rt).into_span()),
            init,
            span: (l, r).into_span()
        }
    },

}

Var: ast::Var = {

    // Simple variable
    <l: @L> <name: ID> <r: @R> => {
        ast::Var::Simple(name, (l, r).into_span())
    },

    ComplexVar,

}

// Refer to https://stackoverflow.com/questions/26968665/bison-shift-reduce-conflict-tiger-compiler
ComplexVar: ast::Var = {

    // Field lookup
    <l: @L> <name: Var> DOT <lf: @L> <field: ID> <r: @R> => {
        ast::Var::Field(Box::new(name), field, (lf, r).into_span(), (l, r).into_span())
    },

    // Direct array indexing
    <l: @L> <name: ID> <rn: @R> LBRACE <idx: Exp> RBRACE <r: @R> => {
        let var = ast::Var::Simple(name, (l, rn).into_span());
        ast::Var::Index(Box::new(var), Box::new(idx), (l, r).into_span())
    },

    // Indirect array indexing
    <l: @L> <name: ComplexVar> LBRACE <idx: Exp> RBRACE <r: @R> => {
        ast::Var::Index(Box::new(name), Box::new(idx), (l, r).into_span())
    },

}

FunDecRec: Vec<ast::Dec> = {

    <l: @L> <decs: FunDec+> <r: @R> <rest: TypeDecRec> => {
        let mut rest = rest;
        rest.insert(0, ast::Dec::Fun(decs, (l, r).into_span()));
        rest
    },

    <l: @L> <decs: FunDec+> <r: @R> <rest: VarDecRec> => {
        let mut rest = rest;
        rest.insert(0, ast::Dec::Fun(decs, (l, r).into_span()));
        rest
    },

    <l: @L> <decs: FunDec+> <r: @R> => {
        vec![ast::Dec::Fun(decs, (l, r).into_span())]
    },

}

FunDec: ast::FunDec = {

    // fundec -> function id ( tyfields ) = exp
    <l: @L> FUNCTION <ln: @L> <name: ID> <rn: @R> LPAREN <args: Comma<FieldDec>> RPAREN EQ <body: Stm> <r: @R> => {
        ast::FunDec {
            name,
            name_span: (ln, rn).into_span(),
            args,
            rets: None,
            rets_span: None,
            body,
            span: (l, r).into_span()
        }
    },

    // fundec -> function id ( tyfields ) : type-id = exp
    <l: @L> FUNCTION <ln: @L> <name: ID> <rn: @R> LPAREN <args: Comma<FieldDec>> RPAREN COLON <lr: @L> <rets: ID> <rr: @R> EQ <body: Stm> <r: @R> => {
        ast::FunDec {
            name,
            name_span: (ln, rn).into_span(),
            args,
            rets: Some(rets),
            rets_span: Some((lr, rr).into_span()),
            body,
            span: (l, r).into_span()
        }
    },

}

// Refer to http://www.parsifalsoft.com/ifelse.html
Stm: ast::Exp = {

    // Statements where at least one [if ... then] doesn't have an else block
    OpenStm,

    // Statements where all [if ... then] have an else block
    ClosedStm,

}

OpenStm: ast::Exp = {

    // If statement with no else
    <l: @L> IF <guard: Exp> THEN <then: Stm> <r: @R> => {
        ast::Exp::If { guard: Box::new(guard), then: Box::new(then), or: None, span: (l, r).into_span() }
    },

    // If statement with else
    <l: @L> IF <guard: Exp> THEN <then: ClosedStm> ELSE <or: OpenStm> <r: @R> => {
        ast::Exp::If { guard: Box::new(guard), then: Box::new(then), or: Some(Box::new(or)), span: (l, r).into_span() }
    },

    // While statement
    <l: @L> WHILE <guard: Exp> DO <body: OpenStm> <r: @R> => {
        ast::Exp::While { guard: Box::new(guard), body: Box::new(body), span: (l, r).into_span() }
    },

    // For statement
    <l: @L> FOR <name: ID> ASSIGN <lo: Exp> TO <hi: Exp> DO <body: OpenStm> <r: @R> => {
        ast::Exp::For { name, escape: false, lo: Box::new(lo), hi: Box::new(hi), body: Box::new(body), span: (l, r).into_span() }
    },

}

ClosedStm: ast::Exp = {

    // While statement
    <l: @L> WHILE <guard: Exp> DO <body: ClosedStm> <r: @R> => {
        ast::Exp::While { guard: Box::new(guard), body: Box::new(body), span: (l, r).into_span() }
    },

    // For statement
    <l: @L> FOR <name: ID> ASSIGN <lo: Exp> TO <hi: Exp> DO <body: ClosedStm> <r: @R> => {
        ast::Exp::For { name, escape: false, lo: Box::new(lo), hi: Box::new(hi), body: Box::new(body), span: (l, r).into_span() }
    },

    // Assignment
    <l: @L> <name: Var> ASSIGN <exp: Exp> <r: @R> => {
        ast::Exp::Ass { name, exp: Box::new(exp), span: (l, r).into_span() }
    },

    Exp,

}

Exp: ast::Exp = {

    // If with else
    <l: @L> IF <guard: Exp> THEN <body: ClosedStm> ELSE <or: ClosedStm> <r: @R> => {
        ast::Exp::If { guard: Box::new(guard), then: Box::new(body), or: Some(Box::new(or)), span: (l, r).into_span() }
    },

    // Let statement
    <l: @L> LET <decs: Decs> IN <lb: @L> <body: Semicolon<Stm>> <rb: @R> END <r: @R> => {
        ast::Exp::Let { decs, body: Box::new(ast::Exp::Seq(body, (lb, rb).into_span())), span: (l, r).into_span() }
    },

    // Literal array
    <l: @L> <name: ID> <rn: @R> LBRACE <size: Exp> RBRACE OF <init: Or> <r: @R> => {
        ast::Exp::Arr { name, name_span: (l, rn).into_span(), size: Box::new(size), init: Box::new(init), span: (l, r).into_span() }
    },

    Or,

}

Binary<Op, Next>: ast::Exp = {

    <l: @L> <lhs: Binary<Op, Next>> <lo: @L> <op: Op> <ro: @R> <rhs: Next> <r: @R> => {
        ast::Exp::Bin {
            lhs: Box::new(lhs),
            op,
            op_span: (lo, ro).into_span(),
            rhs: Box::new(rhs),
            span: (l, r).into_span(),
        }
    },

    Next,

}

Or = Binary<OrOp, And>;

OrOp: ast::Binop = {
    LOR => ast::Binop::LOr,
}

And = Binary<AndOp, Compare>;

AndOp: ast::Binop = {
    LAND => ast::Binop::LAnd,
}

Compare = Binary<CompareOp, Term>;

CompareOp: ast::Binop = {
    GE  => ast::Binop::Ge,
    GT  => ast::Binop::Gt,
    LE  => ast::Binop::Le,
    LT  => ast::Binop::Lt,
    NEQ => ast::Binop::Neq,
    EQ  => ast::Binop::Eq,
}

Term = Binary<TermOp, Factor>;

TermOp: ast::Binop = {
    ADD => ast::Binop::Add,
    SUB => ast::Binop::Sub,
}

Factor = Binary<FactorOp, Unary>;

FactorOp: ast::Binop = {
    DIV => ast::Binop::Div,
    MUL => ast::Binop::Mul,
}

Unary: ast::Exp = {

    // Unary negation
    <l: @L> SUB <exp: Unary> <r: @R> => {
        ast::Exp::Neg(Box::new(exp), (l, r).into_span())
    },

    Atom,

}

Atom: ast::Exp = {

    // Variable
    <l: @L> <v: Var> <r: @R> => {
        ast::Exp::Var(v, (l, r).into_span())
    },

    // Literal int
    <l: @L> <val: INT> <r: @R> => {
        ast::Exp::Int(val, (l, r).into_span())
    },

    // Literal string
    <l: @L> <val: STR> <r: @R> => {
        ast::Exp::Str(val, (l, r).into_span())
    },

    // Literal nil
    <l: @L> NIL <r: @R> => {
        ast::Exp::Nil((l, r).into_span())
    },

    // Literal record
    <l: @L> <name: ID> <rn: @R> LBRACK <fields: Comma<Field>> RBRACK <r: @R> => {
        ast::Exp::Rec { name, name_span: (l, rn).into_span(), fields, span: (l, r).into_span() }
    },

    // Function call
    <l: @L> <name: ID> <rn: @R> LPAREN <args: Comma<Exp>> RPAREN <r: @R> => {
        ast::Exp::Call { name, name_span: (l, rn).into_span(), args, span: (l, r).into_span() }
    },

    // Sequence
    <l: @L> LPAREN <exps: Semicolon<Stm>> RPAREN <r: @R> => {
        ast::Exp::Seq(exps, (l, r).into_span())
    },

    // Break
    <@L> BREAK <@R> => {
        ast::Exp::Break((<>).into_span())
    },

}

Field: ast::Field = {
    <l: @L> <name: ID> <rn: @R> EQ <exp: Exp> <r: @R> => {
        ast::Field { name, name_span: (l, rn).into_span(), exp: Box::new(exp), span: (l, r).into_span() }
    },
}
